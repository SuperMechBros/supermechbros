#!/bin/bash
# name: all
# version: 0.2.5
# Copyright 2017 SMB, MIT License

BASE_DIR="$(cd "$(dirname "${0}")" && pwd -P)"

# Customize
DATA_DIR=${BASE_DIR}/data
DEV_DIR=${HOME}/xonotic/smb
ENGINE_BIN=darkplaces-sdl
ENGINE_DIR=${DEV_DIR}/supermechbros/darkplaces
GAMECODE_DIR=${DEV_DIR}/gamecode
GMQCC_DIR=${DEV_DIR}/gmqcc
MAPS_DIR=${DATA_DIR}/xonotic-sxb.pk3dir
USER_DIR=${HOME}/.supermechanicalbros
USER_DATA_DIR=${USER_DIR}/data

# Internal Constants
GAMECODE_REPO="git@github.com:SuperMechBros/gamecode.git"
DATA_REPOS="smb-data.pk3dir smb-maps.pk3dir"
SCRIPT_NAME=$(basename $0 .sh)
VERSION=$(awk 'NR == 3 {print $3; exit}' $0)

# Helpers
_check_dir() {
    local _dir=$1
    if [[ ! -d ${_dir} ]]; then
        echo "[ ERROR ] Unable to locate '${_dir}' directory."; exit 1
    fi
}

_fix_windows_path() {
    export PATH="${BASE_DIR}/misc/buildfiles/win64:${BASE_DIR}/d0_blind_id/.libs:$PATH"
}

_get_engine_dir() {
    relative_dir=${ENGINE_DIR}
    _check_dir ${relative_dir}
    export SMB_DIR=$(cd ${relative_dir}; pwd)
}

_get_dev_dir() {
    relative_dir=$(dirname $0)/../
    _check_dir ${relative_dir}
    if [[ "$(cd $(dirname $0)/../; basename $(pwd))" == "smb" ]]; then
        export DEV_DIR=$(cd ${relative_dir}; pwd)
    else
        echo "[ SAFETY CHECK ] the parent directory needs to be named 'smb'"
        exit 1
    fi
}

# Build Tasks

smb_build_all() {
    smb_build_game
    smb_build_maps $@
}

smb_build_game() {
    cd ${DEV_DIR}

    smb_update

    cd ${GMQCC_DIR}
    make

    cd ${GAMECODE_DIR}
    make

    cd ${DATA_DIR}

    # Build
    cd ${DEV_DIR}/gamecode && \
        ./update.sh && \
        ./build.sh

    # Move mod
    mkdir -p ${USER_DATA_DIR} && \
        cp *.dat ${USER_DATA_DIR}
}

smb_build_maps() {
    cd ${DATA_DIR}
    if [[ ! -d ${MAPS_DIR} ]]; then
        git clone git@github.com:z/xonotic-sxb.pk3dir.git && cd ${MAPS_DIR}
    else
        cd ${MAPS_DIR} && git fetch && git pull --rebase
    fi
    if [[ ! -f ${MAPS_DIR}/build.conf ]]; then
        echo -e "XONDIR=${HOME}/xonotic/xonotic\nRADIANTDIR=${HOME}/xonotic/xonotic/netradiant/install" > ${MAPS_DIR}/build.conf
    fi
    ./build.sh --maps-all
}

smb_update() {
  cd ${DEV_DIR}

  # Clone or Update deps
  echo "Updating: gmqcc"
  if [[ ! -d ${GMQCC_DIR} ]]; then
      git clone https://gitlab.com/xonotic/gmqcc.git && cd ${GMQCC_DIR}
  else
      cd ${GMQCC_DIR} && git fetch && git pull --rebase
  fi

  # Clone or Update gamecode
  echo "Updating: gamecode"
  if [[ ! -d ${GAMECODE_DIR} ]]; then
      git clone ${GAMECODE_REPO} && cd ${GAMECODE_DIR}
  else
      cd ${GAMECODE_DIR} && git fetch && git pull --rebase
  fi

  cd ${DATA_DIR}

  # Clone or Update repos
  for r in ${DATA_REPOS}; do
      echo "Updating: ${r}"
      if [[ ! -d ${r} ]]; then
          git clone git@github.com:SuperMechBros/${r}.git && cd ${r}
      else
          cd ${r} && git fetch && git pull --rebase
      fi
      cd ${DATA_DIR}
  done
}

smb_run() {
    ${SMB_DIR}/${ENGINE_BIN} -smb $@
}

# Meta

_version() {
    echo ${VERSION}
}

_help_short() {
    echo "./all
      build [all|game|maps]       builds the game, maps, or both. implies update.
      run                         runs Super Mechanical Bros.
      update                      update all repositories, and dependencies
      --version                   prints the version string
      --help                      prints additional help
"
}

_help_long() {
    echo "./all

FLAGS
    --version                   prints the version string
    --help                      prints this help

COMMANDS

    build [all|game|maps]       builds the game, maps, or both. implies update.
    run                         runs Super Mechanical Bros.
    update                      update all repositories, and dependencies

REPOSITORY STRUCTURE

    The all script operates with the repository structure modeled below.

    smb
    ├── gamecode                   # quakec
    ├── gmqcc                      # gitlab.com/xonotic/gmqcc
    └── supermechbros              # You are HERE
        ├── darkplaces             # TODO (use Mario/smb in darkplaces)
        └── data
            ├── smb-data.pk3dir
            ├── smb-maps.pk3dir
            └── xonotic-sxb.pk3dir # github.com/z/xonotic-sxb.pk3dir

EXAMPLES

    # init build game without maps
    ./all build

    # update dependencies, builds maps
    ./all build maps

    # runs the game
    ./all run

    # Override the path to Super Mechnical Bros.
    # (normally assumed from relative location of this script)
    SMB_DIR=\$HOME/some/other/dir; ./all --version
"
}


# Init

# Allow for overriding the path assumption
# SMB_DIR=$HOME/some/other/dir; ./all --version
if [[ -z ${SMB_DIR} ]]; then
    _get_engine_dir
else
    _check_dir ${SMB_DIR}
fi

case "`uname`" in
    MINGW*|Win*)        _fix_windows_path;
esac

case $1 in
    # meta
    '--help'|'help')         shift; _help_long $@;;
    '--version'|'version')   shift; _version;;
    # commands
    'build')
        case $2 in
            'all')           shift; smb_build_all $@;;
            'maps')          shift; smb_build_maps $@;;
            'game')          shift; smb_build_game;;
            *)               shift; smb_build_game;;
        esac;;
    'run')                   shift; smb_run $@;;
    'update')                shift; smb_update $@;;
    # default
    *)                       shift; _help_short; exit 0;;
esac
